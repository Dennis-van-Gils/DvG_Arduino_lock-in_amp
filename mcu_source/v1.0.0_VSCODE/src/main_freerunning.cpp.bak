/*
  For SAMD51
  Dennis van Gils
  12-04-2019
*/

#include <Arduino.h>
#include "Streaming.h"

// Wait for synchronization of registers between the clock domains
static __inline__ void syncADC() __attribute__((always_inline, unused));
static void syncADC() {while (ADC0->STATUS.bit.ADCBUSY == 1);}

#define Ser Serial
#define BUFFER_SIZE 10000
#define ADC_RESOLUTION 12   // [bits]

bool fRunning = true;
volatile bool fSend_buffer = false;
volatile uint32_t buffer_time[BUFFER_SIZE] = {0};
volatile uint16_t buffer_sig [BUFFER_SIZE] = {0};

void setup_generic_clock(int clk, int div_factor, int div_selection) {
  // Enable the APBD clock for the ADC
  REG_MCLK_APBDMASK |= MCLK_APBDMASK_ADC0;

  // [Generator #n = clk]
  Ser << "GCLK_GENCTRL_DIV a: " << GCLK->GENCTRL[clk].bit.DIV << endl;
  Ser << "GCLK_GENCTRL_SRC a: " << GCLK->GENCTRL[clk].bit.SRC << endl << endl;
  GCLK->GENCTRL[clk].bit.DIVSEL = div_selection;        // [0 or 1]
  while (GCLK->SYNCBUSY.reg > 0);                       // Must synchronize
  GCLK->GENCTRL[clk].bit.DIV = div_factor;
  while (GCLK->SYNCBUSY.reg > 0);
  GCLK->GENCTRL[clk].bit.SRC = GCLK_SOURCE_DFLL48M;     // Selecting a Clock Source for the Generator
  while (GCLK->SYNCBUSY.reg > 0);
  GCLK->GENCTRL[clk].bit.GENEN = 1;                     // Enable Generator [0 or 1]
  while (GCLK->SYNCBUSY.reg > 0);
  Ser << "GCLK_GENCTRL_DIV b: " << GCLK->GENCTRL[clk].bit.DIV << endl;
  Ser << "GCLK_GENCTRL_SRC b: " << GCLK->GENCTRL[clk].bit.SRC << endl << endl;

  // [Peripheral Channel #m = ADC0_GCLK_ID]
  // See 14.6.3.3 of data sheet
  Ser << "PCHCTRL a: " << GCLK->PCHCTRL[ADC0_GCLK_ID].reg << endl; // 65

  GCLK->PCHCTRL[ADC0_GCLK_ID].bit.CHEN = 0;             // Disable peripheral channel [0 or 1]
  while (GCLK->PCHCTRL[ADC0_GCLK_ID].bit.CHEN > 0);     // Assert it's disabled

  Ser << "PCHCTRL b: " << GCLK->PCHCTRL[ADC0_GCLK_ID].reg << endl; // 1

  GCLK->PCHCTRL[ADC0_GCLK_ID].bit.GEN = clk;            // Select generic clock generator #n
  GCLK->PCHCTRL[ADC0_GCLK_ID].bit.CHEN = 1;             // Enable peripheral channel [0 or 1]
  while (GCLK->SYNCBUSY.reg > 0);
  while (GCLK->PCHCTRL[ADC0_GCLK_ID].bit.CHEN == 0);    // Assert it's enabled

  Ser << "PCHCTRL c: " << GCLK->PCHCTRL[ADC0_GCLK_ID].reg << endl; // 67
}

void setup_ADC() {
  analogRead(A1); // Differential +
  analogRead(A2); // Differential -

  ADC0->CTRLA.bit.ENABLE = 0;
  ADC1->CTRLA.bit.ENABLE = 0;
  syncADC();

  // Set resolution
  ADC0->CTRLB.bit.RESSEL = ADC_CTRLB_RESSEL_12BIT_Val;
  while(ADC0->SYNCBUSY.reg & ADC_SYNCBUSY_CTRLB); //wait for sync

  /*
  // Slave ADC1 to ADC0
  ADC1->CTRLA.bit.SLAVEEN = 1;
  syncADC();
  // Set differential mode on A1(+) and A2(-)
  ADC0->INPUTCTRL.bit.DIFFMODE = 1;
  syncADC();
  ADC0->INPUTCTRL.bit.MUXPOS = g_APinDescription[PIN_A1].ulADCChannelNumber;
  ADC0->INPUTCTRL.bit.MUXNEG = g_APinDescription[PIN_A2].ulADCChannelNumber;
  syncADC();
  */

  // Set single-ended mode on pin A1
  ADC0->INPUTCTRL.bit.DIFFMODE = 0;
  syncADC();
  while (ADC0->SYNCBUSY.reg & ADC_SYNCBUSY_INPUTCTRL);
  ADC0->INPUTCTRL.bit.MUXPOS = g_APinDescription[A1].ulADCChannelNumber;
  ADC0->INPUTCTRL.bit.MUXNEG = ADC_INPUTCTRL_MUXNEG_GND_Val;
  syncADC();
  
  // The results of multiple, consecutive conversions can be accumulated
  ADC0->AVGCTRL.bit.SAMPLENUM = ADC_AVGCTRL_SAMPLENUM_1_Val;
  //ADC0->AVGCTRL.bit.ADJRES = 2;
  syncADC();
  
  // Sampling time
  // These bits control the ADC sampling time in number of CLK_ADC cycles,
  // depending of the prescaler value, thus controlling the ADC input impedance.
  ADC0->SAMPCTRL.bit.SAMPLEN = ADC_SAMPCTRL_SAMPLEN(1);
  syncADC();

  // Reference Voltage Selection
  ADC0->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 3: INTVCC1 on SAMD51 = VDDANA
  syncADC();
  
  // ADC clock divisor
  ADC0->CTRLA.bit.PRESCALER = ADC_CTRLA_PRESCALER_DIV16_Val;
  syncADC();

  // Enable free running
  ADC0->CTRLB.bit.FREERUN = 1;
  syncADC();

  // Disable window monitor mode
  ADC0->CTRLB.bit.WINMODE = 0;
  syncADC();

  // Start ADC when event occurs
  ADC0->EVCTRL.bit.STARTEI = 1;
  syncADC();

  // Ready and stand-by
  ADC0->CTRLA.bit.ENABLE = 1;
  syncADC();
}

void setup_ADC_interrupt(byte priority) {
  // Priority of interrupt: 0 is highest priority
  // ADC0_0_IRQn = 118, /**< 118 SAMD51J19A Analog Digital Converter 0 (ADC0): ADC0_OVERRUN, ADC0_WINMON */
  // ADC0_1_IRQn = 119, /**< 119 SAMD51J19A Analog Digital Converter 0 (ADC0): ADC0_RESRDY */
  ADC0->INTENSET.bit.RESRDY = 1;
  syncADC();
  NVIC_EnableIRQ(ADC0_1_IRQn);              // Enable ADC interrupts
  NVIC_SetPriority(ADC0_1_IRQn, priority);  // Set priority of the interrupt
}

/*------------------------------------------------------------------------------
    ADC0_1_Handler
------------------------------------------------------------------------------*/

volatile uint16_t write_idx = 0;

void ADC0_1_Handler() {
  // Interrupt service routine (isr) for the ADC
  
  // Need to reset interrupt
  //ADC0->INTFLAG.reg = ADC_INTFLAG_RESRDY;

  if (!fSend_buffer) {
    /*
    if ((write_idx == 0) || (write_idx == (BUFFER_SIZE - 1))) {
      buffer_time[write_idx] = micros();
    }
    */

    buffer_time[write_idx] = micros();
    buffer_sig[write_idx] = REG_ADC0_RESULT; // ADC0->RESULT.reg;
    write_idx++;

    if (write_idx == BUFFER_SIZE) {
      fSend_buffer = true;
      write_idx = 0;
    }
  }

  /*
  if (write_idx < BUFFER_SIZE) {
    //if ((write_idx == 0) || (write_idx == (BUFFER_SIZE - 1))) {
    //  buffer_time[write_idx] = micros();
    //}
    buffer_time[write_idx] = micros();
    buffer_sig[write_idx] = REG_ADC0_RESULT; // ADC0->RESULT.reg;
    write_idx++;
  }
  */

  // Need to reset interrupt
  ADC0->INTFLAG.reg = ADC_INTFLAG_RESRDY;
}

/*------------------------------------------------------------------------------
    setup
------------------------------------------------------------------------------*/

void setup() {
  Ser.begin(9600);
  while (!Ser) {delay(1);} // Wait for serial connection

  Ser.println("--> setup_generic_clock");
  setup_generic_clock(4, 32, 0);

  Ser.println("--> setup_ADC");
  setup_ADC();
  
  Ser.println("--> setup_ADC_interrupt");
  setup_ADC_interrupt(0);

  Ser.println("--> trigger start ADC");
  ADC0->SWTRIG.bit.START = 1;
  
  Ser.println("--> setup DONE");
}

/*------------------------------------------------------------------------------
    loop
------------------------------------------------------------------------------*/

void loop() {
  if (fRunning && fSend_buffer) {
  //if (write_idx == BUFFER_SIZE && fRunning) {
    // Stop isr and dump complete buffer to serial terminal
    noInterrupts();
    
    //*
    Ser << "0000" << '\t'
        << buffer_time[0] << '\t'
        << buffer_sig[0] << endl;

    for (uint16_t idx = 1; idx < BUFFER_SIZE; idx++) {
      Ser << (buffer_time[idx] - buffer_time[idx - 1]) << '\t'
          << buffer_time[idx] << '\t'
          << buffer_sig[idx] << endl;
    }
    
    /*
    Ser << (buffer_time[BUFFER_SIZE - 1] - buffer_time[BUFFER_SIZE - 2]) << '\t'
        << buffer_time[BUFFER_SIZE - 1] << '\t'
        << buffer_sig[BUFFER_SIZE - 1] << endl;
    */

    Ser << "Fs = " << (1.0e6 * BUFFER_SIZE /
                       (buffer_time[BUFFER_SIZE - 1] - buffer_time[0]))
        << " Hz" << endl;

    fSend_buffer = false;
    //fRunning = false;
    
    interrupts();
  }
}