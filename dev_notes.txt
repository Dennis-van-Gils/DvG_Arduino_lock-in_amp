* To enable Visual Studio Code debugger to have debug access to another thread
  add this to the start of `worker_DAQ._do_work()` and `worker_jobs._do_work()`

  if self.debug:
      import pydevd
      pydevd.settrace(suspend=False)



* SNIPPET: To quickly enable FFTW running inside numpy and (partially) scipy

  import pyfftw
  np.fft = pyfftw.interfaces.numpy_fft  # Monkey patch fftpack
  pyfftw.interfaces.cache.enable()      # Turn on cache for optimum performance



* Arduino lockin-amplifier commands

  V1.0.0_VSCODE
  -------------

  command             compute LUT     reply                               Remark
  --------------------------------------------------------------------------------

  on                                                                      Start lock-in
  _on                                                                     Start lock-in and reset timer to 0
  off                                                                     Stop lock-in

  _freq #.###         no              ASCII [freq]
  _offs #.###         no              ASCII [offs]
  _ampl #.###         no              ASCII [ampl]
  _vrms #.###         no              ASCII [ampl_RMS]
  _wave #             no              ASCII [waveform string]                                                       
  
  compute_lut / c     yes             none                                (re)compute the waveform LUT
                                                            
  ref? / ?            yes             ASCII [waveform,                    Will also (re)compute the waveform LUT
                                             freq,
                                             offs,
                                             ampl,
                                             ampl_RMS,
                                             is_clipping_HI,
                                             is_clipping_LO,
                                             N_LUT]

  lut?                no              ASCII [N_LUT, is_LUT_dirty]         HAS BECOME OBSOLETE
                                      BINARY [LUT[]]
                                       
  lut_ascii? / la?    no              ASCII [N_LUT, is_LUT_dirty]
                                      ASCII [LUT[]]
                                      
  t?                  no              ASCII [millis.micros]
 